<source>
  type forward
  port 24224
  bind 0.0.0.0
</source>

# For app container logs (stdout/stderr) coming in on the HTTP port,
# rewrite the tag by looking at the source field.
<match app-container>
  @type rewrite_tag_filter
  rewriterule1 source ^(\w+) $1
</match>

<source>
  type tail
  format none
  path /var/log/app_engine/app/app*.log
  pos_file /var/tmp/fluentd.app.pos
  read_from_head true
  rotate_wait 10s
  tag app
</source>

<source>
  type tail
  format json
  path /var/log/app_engine/app/app*.json
  pos_file /var/tmp/fluentd.app_json.pos
  read_from_head true
  rotate_wait 10s
  tag app
</source>

<source>
  type tail
  format none
  path /var/log/app_engine/app/request*.log
  pos_file /var/tmp/fluentd.request.pos
  read_from_head true
  rotate_wait 10s
  tag request
</source>

<source>
  type tail
  format none
  path /var/log/app_engine/app/STDOUT*.log
  pos_file /var/tmp/fluentd.STDOUT.pos
  read_from_head true
  rotate_wait 10s
  tag stdout
</source>

<source>
  type tail
  format none
  path /var/log/app_engine/app/STDERR*.log
  pos_file /var/tmp/fluentd.STDERR.pos
  read_from_head true
  rotate_wait 10s
  tag stderr
</source>

<source>
  type tail
  format none
  path /var/log/app_engine/app/custom_logs/*.log
  pos_file /var/tmp/fluentd.custom_logs.pos
  read_from_head true
  rotate_wait 10s
  tag custom.*
</source>

<source>
  type tail
  format json
  path /var/log/app_engine/app/custom_logs/*.json
  pos_file /var/tmp/fluentd.custom_logs_json.pos
  read_from_head true
  rotate_wait 10s
  tag custom.*
</source>

<source>
  type tail
  format none
  path /var/log/app_engine/monitoring/*.log
  pos_file /var/tmp/fluentd.mvm-monitoring.pos
  read_from_head true
  rotate_wait 10s
  tag monitoring.*
</source>

<source>
  type tail
  format none
  path /var/log/syslog
  pos_file /var/tmp/fluentd.syslog.pos
  read_from_head true
  rotate_wait 10s
  tag syslog
</source>

# Parse nginx request (access) logs, which may inc. multiple custom suffixes:
#   tracecontext="(hexadecimal traceId)/options"
#   timestampSeconds="(epoch seconds, floating point)"
# where the / and the options are themselves optional. Instead of using the
# default "format nginx" directive, this uses a custom regex to capture both
# standard and modified nginx logs and add traceId if one is found.
<source>
  type tail
  # The default format ends with ..."(?<agent>[^\"]*)")?$/ . This regex is
  # the same as the default up until the end, at which point, before the $,
  # there are optional groups for the tracecontext and the time in seconds.
  # The timeSeconds and timeNanos are used preferentially by cloud logging
  # in place of the standard time capture, which grants us the ability to do
  # sub-second granular logs.
  format /^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?(?: tracecontext="(?<traceId>[^/\"]*)[^\"]*")?(?: timestampSeconds="(?<timestampSeconds>[^\.\"]*)\.(?<timestampNanos>[^\"]*)")?$/
  time_format %d/%b/%Y:%H:%M:%S %z 
  path /var/log/nginx/access.log
  pos_file /var/tmp/fluentd.nginx-access.pos
  read_from_head true
  rotate_wait 10s
  tag access
</source>

# Link /var/lib/docker/containers we want to save to /var/log/docker_containers
<source>
  type tail
  path /var/log/saved_docker/*/*-json.log
  pos_file /var/tmp/saved-docker.pos
  time_format %Y-%m-%dT%H:%M:%S
  tag docker.*
  read_from_head true
  format json
</source>

# Do not collect fluentd's own logs to avoid infinite loops.
<match fluent.**>
  type null
</match>

# Docker container logs go through the from_docker container
<match docker.var.log.saved_docker.*.*.log>
  type from_docker
  stdout_tag stdout
  stderr_tag stderr
</match>

<match **>
  type google_cloud
  buffer_chunk_limit 1m
  flush_interval 5s
  # Never wait longer than 5 minutes between retries
  max_retry_wait 300
  disable_retry_limit
  # Send these fields as labels instead of in the struct_payload
  label_map {
    "thread": "appengine.googleapis.com/thread_id",
    "traceId": "appengine.googleapis.com/trace_id"
  }
</match>
